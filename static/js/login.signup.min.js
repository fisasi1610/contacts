"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LoginSignup =
/*#__PURE__*/
function () {
  function LoginSignup() {
    _classCallCheck(this, LoginSignup);

    this.alert = new AlertPlugin();
    this.$formSignup = $("#form-signup");
    this.config = $.extend(true, {}, APP);
    this.url = {
      searchEmail: "".concat(this.config.url.controllerFullUrl, "/validateEmail")
    };
  }

  _createClass(LoginSignup, [{
    key: "initValidation",
    value: function initValidation() {
      var _this = this;

      console.log("INIT");
      this.$formSignup.validate({
        submitHandler: function submitHandler(form) {
          console.log("SUBMIT");

          _this.alert.confirm({
            text: 'Â¿Los datos son los correctos?',
            type: 'warning',
            title: 'Advertencia!'
          }, function () {
            form.submit();
          });
        },
        rules: {
          "Persona[tipo_documento]": {
            required: true
          },
          "Persona[documento]": {
            required: true
          },
          "Persona[nombre]": {
            required: true
          },
          "Persona[apellido]": {
            required: true
          },
          "Usuario[password]": {
            required: true
          },
          "Usuario[confirm_password]": {
            required: true,
            equalTo: "#Usuario_password"
          },
          "Persona[correo]": {
            required: true,
            email: true,
            remote: {
              url: "".concat(this.url.searchEmail),
              type: "post",
              data: {
                email: function email() {
                  return _this.$formSignup.find("input#Persona_correo").val();
                }
              }
            }
          }
        },
        messages: {
          "Persona[correo]": {
            required: 'Por favor complete este campo',
            email: 'Por favor indique un correo valido',
            remote: 'Ya existe este correo'
          }
        }
      });
    }
  }, {
    key: "init",
    value: function init() {
      this.initValidation();
    }
  }]);

  return LoginSignup;
}();

$(function () {
  new LoginSignup().init();
});