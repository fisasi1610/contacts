"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CategoriaIndex =
/*#__PURE__*/
function () {
  function CategoriaIndex() {
    _classCallCheck(this, CategoriaIndex);

    this.table = new TablePlugin("#tbCategoria");
    this.ajax = new AjaxPlugin();
    this.form = new FormPlugin();
    this.alert = new AlertPlugin();
    this.$modalCreate = new ModalPlugin("#md-manage-create");
    this.$modalUpdate = new ModalPlugin("#md-manage-update");
    this.config = _objectSpread({}, Request, APP);
    this.url = {
      list: "".concat(this.config.url.controllerFullUrl, "/list"),
      update: "".concat(this.config.url.controllerFullUrl, "/update"),
      create: "".concat(this.config.url.controllerFullUrl, "/create"),
      "delete": "".concat(this.config.url.controllerFullUrl, "/delete")
    };
  }

  _createClass(CategoriaIndex, [{
    key: "_submitCreate",
    value: function _submitCreate(form) {
      var _this = this;

      this.ajax.post(this.url.create, $(form).serialize()).then(function (response) {
        _this.table.refresh();

        _this.$modalCreate.close();

        Notify("success", response.data.message, "bottomRight");
      })["catch"](function (error) {
        Notify("error", error.data.message, "bottomRight");
      });
    }
  }, {
    key: "_submitUpdate",
    value: function _submitUpdate(form) {
      var _this2 = this;

      this.ajax.post(this.url.update, $(form).serialize()).then(function (response) {
        _this2.table.refresh();

        _this2.$modalUpdate.close();

        Notify("success", response.data.message, "bottomRight");
      })["catch"](function (error) {
        Notify("error", error.data.message, "bottomRight");
      });
    }
  }, {
    key: "_deleteCategoria",
    value: function _deleteCategoria(row) {
      var _this3 = this;

      this.alert.confirm({
        title: "Â¡Advertencia!",
        text: "Va a eliminar la categoria <strong>\"".concat(row.uname, "\"</strong>"),
        type: "warning"
      }, function () {
        _this3.ajax.post(_this3.url["delete"], _this3.form.create({
          urid: row.id
        })).then(function (response) {
          _this3.table.refresh();

          Notify("success", response.data.message, "bottomRight");
        })["catch"](function (error) {
          Notify("error", error.data.message, "bottomRight");
        });
      });
    }
  }, {
    key: "initModalCreate",
    value: function initModalCreate() {
      var _this4 = this;

      this.$modalCreate.setOptions({
        title: 'Nuevo Registro',
        buttonInit: "#btn-create",
        form: "#form-manage-create",
        buttonCancel: '#btn-close',
        buttonSubmit: '#btn-save',
        formValidate: {
          rules: {
            "Categoria[nombre]": {
              required: true
            }
          }
        }
      });
      this.$modalCreate.init();
      this.$modalCreate.submit(function (form) {
        _this4._submitCreate(form);
      });
    }
  }, {
    key: "initModalUpdate",
    value: function initModalUpdate() {
      var _this5 = this;

      this.$modalUpdate.setOptions({
        title: 'Actualizar Registro',
        buttonInit: false,
        form: "#form-manage-update",
        buttonCancel: '#btn-close',
        buttonSubmit: '#btn-save',
        formValidate: {
          rules: {
            "Categoria[id]": {
              required: true
            },
            "Categoria[nombre]": {
              required: true
            }
          }
        }
      });
      this.$modalUpdate.init();
      this.$modalUpdate.submit(function (form) {
        _this5._submitUpdate(form);
      });
    }
  }, {
    key: "initTable",
    value: function initTable() {
      var _this6 = this;

      this.table.setOptions({
        url: this.url.list,
        pageSize: 10
      });
      this.table.columns([{
        field: 'id',
        title: 'ID',
        sortable: true,
        align: 'center',
        width: '70px',
        "class": 'bold'
      }, {
        field: 'nombre',
        title: 'Nombre de la Categoria',
        sortable: true
      }, {
        field: 'action',
        title: '<i class="fa fa-ellipsis-h" aria-hidden="true"></i>',
        align: 'center',
        width: '70px',
        formatter: function formatter(value, row, index, field) {
          return "\n          <div class=\"wrapper text-center\" role=\"toolbar\">\n            <div class=\"btn-group btn-group-sm\" role=\"group\">\n              <button \n                type=\"button\" \n                class=\"edit btn btn-outline-info\" \n                data-action=\"modify\" \n                data-rel=\"tooltip\" \n                title=\"Editar\">\n                <i class=\"fa fa-pencil\" aria-hidden=\"true\"></i>\n              </button>\n              <button \n                type=\"button\" \n                class=\"delete btn btn-outline-danger\" \n                data-rel=\"tooltip\" \n                title=\"Editar\">\n                <i class=\"fa fa-trash\" aria-hidden=\"true\"></i>\n              </button>\n            </div>\n          </div>\n          ";
        },
        events: {
          'click .edit': function clickEdit(e, value, row, index) {
            _this6.$modalUpdate.setData(row);

            _this6.$modalUpdate.open();
          },
          'click .delete': function clickDelete(e, value, row, index) {
            _this6._deleteUser(row);
          }
        }
      }]);
      this.table.init();
    }
  }, {
    key: "init",
    value: function init() {
      this.initTable();
      this.initModalCreate();
      this.initModalUpdate();
    }
  }]);

  return CategoriaIndex;
}();

$(function () {
  new CategoriaIndex().init();
});