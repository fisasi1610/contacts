"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var RolePermissions =
/*#__PURE__*/
function () {
  function RolePermissions() {
    _classCallCheck(this, RolePermissions);

    this.table = new TablePlugin("#tbRolePermissions");
    this.alert = new AlertPlugin();
    this.ajax = new AjaxPlugin();
    this.form = new FormPlugin();
    this.config = $.extend(true, {}, APP);
    this.url = {
      assignAction: "".concat(this.config.url.controllerFullUrl, "/assignPermission"),
      removeAction: "".concat(this.config.url.controllerFullUrl, "/removePermission"),
      listActions: "".concat(this.config.url.controllerFullUrl, "/listPermissions")
    };
  }

  _createClass(RolePermissions, [{
    key: "_assign",
    value: function _assign(aid, aname) {
      var _this = this;

      this.alert.confirm({
        title: "¡Advertencia!",
        text: "Va a asignar la acci\xF3n <strong>\"".concat(aname, "\"</strong> al rol"),
        type: "warning"
      }, function () {
        _this.ajax.post(_this.url.assignAction, _this.form.create({
          rid: Request._GET.rid,
          aid: aid
        })).then(function (response) {
          _this.table.refresh();

          Notify("success", response.data.message, "bottomRight");
        })["catch"](function (error) {
          Notify("error", error.response.data.message, "bottomRight");
        });
      });
    }
    /**
     * 
     * @param int pid ID Permission
     * @param string aname Nombre de la accion
     * @returns void
     */

  }, {
    key: "_remove",
    value: function _remove(pid, aname) {
      var _this2 = this;

      this.alert.confirm({
        title: "¡Advertencia!",
        text: "Va a remover la acci\xF3n <strong>\"".concat(aname, "\"</strong> al rol"),
        type: "warning"
      }, function () {
        _this2.ajax.post(_this2.url.removeAction, _this2.form.create({
          pid: pid
        })).then(function (response) {
          _this2.table.refresh();

          Notify("success", response.data.message, "bottomRight");
        })["catch"](function (error) {
          Notify("error", error.response.data.message, "bottomRight");
        });
      });
    }
  }, {
    key: "initTable",
    value: function initTable() {
      var _this3 = this;

      this.table.setOptions({
        url: "".concat(this.url.listActions, "?rid=").concat(Request._GET.rid),
        pageSize: 10,
        rowStyle: function rowStyle(row) {
          if (row.permission_id != null) return {
            classes: 'table-success'
          };
          return {
            classes: ''
          };
        }
      });
      this.table.columns([{
        field: 'aid',
        title: 'ID',
        sortable: true,
        align: 'center',
        width: '70px',
        "class": 'bold'
      }, {
        field: 'aname',
        title: 'Nombre de la Acción',
        sortable: true
      }, {
        field: 'action',
        title: '<i class="fa fa-ellipsis-h" aria-hidden="true"></i>',
        align: 'center',
        width: '70px',
        formatter: function formatter(value, row, index, field) {
          if (row.pid == null) {
            return "\n          <div class=\"wrapper text-center\" role=\"toolbar\">\n            <div class=\"btn-group btn-group-sm\" role=\"group\">\n              <button \n                type=\"button\" \n                class=\"assign btn btn-info\" \n                data-action=\"modify\">\n                Asignar\n              </button>\n            </div>\n          </div>\n          ";
          } else {
            return "\n          <div class=\"wrapper text-center\" role=\"toolbar\">\n            <div class=\"btn-group btn-group-sm\" role=\"group\">\n              <button \n                type=\"button\" \n                class=\"remove btn btn-danger\" \n                data-action=\"modify\">\n                Remover\n              </button>\n            </div>\n          </div>\n          ";
          }
        },
        events: {
          'click .assign': function clickAssign(e, value, row, index) {
            _this3._assign(row.aid, row.aname);
          },
          'click .remove': function clickRemove(e, value, row, index) {
            _this3._remove(row.pid, row.aname);
          }
        }
      }]);
      this.table.init();
    }
  }, {
    key: "init",
    value: function init() {
      this.initTable();
    }
  }]);

  return RolePermissions;
}();

$(function () {
  new RolePermissions().init();
});