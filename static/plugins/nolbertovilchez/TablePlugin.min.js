"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var TablePlugin =
/*#__PURE__*/
function () {
  function TablePlugin(table) {
    _classCallCheck(this, TablePlugin);

    this.$options = $.extend(true, {}, APP["default"].bootstrapTable);
    this.$table = $(table);
  }

  _createClass(TablePlugin, [{
    key: "init",
    value: function init() {
      this.$table.bootstrapTable(this.getOptions());
    }
  }, {
    key: "isInitilizated",
    value: function isInitilizated() {
      return !(typeof this.$table.bootstrapTable("getOptions").columns === "undefined");
    }
  }, {
    key: "setOptions",
    value: function setOptions(options) {
      this.$options = $.extend(true, this.$options, options);
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.$options;
    }
  }, {
    key: "getData",
    value: function getData() {
      return this.$table.bootstrapTable('getData');
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.$table.bootstrapTable('refresh', options);
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.$table.bootstrapTable("destroy");
    }
  }, {
    key: "events",
    value: function events() {
      var eventsObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.$options = Object.assign({}, this.$options, eventsObj);
    }
  }, {
    key: "getRowByAttributes",
    value: function getRowByAttributes() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = this.$table.bootstrapTable("getData");
    }
  }, {
    key: "columns",
    value: function columns() {
      var _columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      if (_columns.length > 0) this.$options.columns = _columns;
    }
  }, {
    key: "showColumn",
    value: function showColumn(name) {
      this.$table.bootstrapTable('showColumn', name);
    }
  }, {
    key: "hideColumn",
    value: function hideColumn(name) {
      this.$table.bootstrapTable('hideColumn', name);
    }
  }, {
    key: "selectPage",
    value: function selectPage() {
      var page = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      this.$table.bootstrapTable('selectPage', page);
    }
  }, {
    key: "getSelections",
    value: function getSelections() {
      return this.$table.bootstrapTable('getSelections');
    }
  }, {
    key: "getRowByUniqueId",
    value: function getRowByUniqueId(id) {
      return this.$table.bootstrapTable('getRowByUniqueId', id);
    }
  }, {
    key: "updateByUniqueId",
    value: function updateByUniqueId(id, row) {
      var params = {
        'id': id,
        'row': row
      };
      this.$table.bootstrapTable("updateByUniqueId", params);
    }
  }, {
    key: "updateRow",
    value: function updateRow(index, row) {
      var params = {
        index: index,
        row: row
      };
      this.$table.bootstrapTable("updateRow", params);
    }
  }, {
    key: "updateCellByUniqueId",
    value: function updateCellByUniqueId(id, field, value) {
      var params = {
        'id': id,
        'field': field,
        'value': value
      };
      this.$table.bootstrapTable("updateCellById", params);
    }
  }, {
    key: "removeByUniqueId",
    value: function removeByUniqueId(id) {
      return this.$table.bootstrapTable('removeByUniqueId', id);
    }
  }, {
    key: "append",
    value: function append(row) {
      this.$table.bootstrapTable("append", row);
    }
  }]);

  return TablePlugin;
}();