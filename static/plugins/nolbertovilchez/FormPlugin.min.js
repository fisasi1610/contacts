"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var FormPlugin =
/*#__PURE__*/
function () {
  function FormPlugin() {
    _classCallCheck(this, FormPlugin);

    this.id = FORM_ID;
    this.name = "_pl_csrf";

    this._remove_script();
  }

  _createClass(FormPlugin, [{
    key: "_remove_script",
    value: function _remove_script() {
      var script = document.querySelector('[type="text/javascript"][id="form-external"]');
      script.parentNode.removeChild(script);
    }
  }, {
    key: "formData",
    value: function formData() {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Object();
      var form = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new FormData();
      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      for (var i in items) {
        if (items[i] instanceof File) {
          form.append(parent ? "".concat(parent, "[").concat(i, "]") : i, items[i]);
        } else if (_typeof(items[i]) === "object") {
          this.formData(items[i], form, parent ? "".concat(parent, "[").concat(i, "]") : i);
        } else {
          form.append(parent ? "".concat(parent, "[").concat(i, "]") : i, items[i]);
        }
      }

      return form;
    }
  }, {
    key: "getId",
    value: function getId() {
      return this.id;
    }
  }, {
    key: "getName",
    value: function getName() {
      return this.name;
    }
  }, {
    key: "appendToken",
    value: function appendToken() {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Object();
      items[this.getName()] = this.getId();
      return items;
    }
  }, {
    key: "create",
    value: function create() {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Object();
      return this.formData(this.appendToken(items));
    }
  }]);

  return FormPlugin;
}();