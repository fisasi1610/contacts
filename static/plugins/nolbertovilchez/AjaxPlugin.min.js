"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AjaxPlugin =
/*#__PURE__*/
function () {
  function AjaxPlugin() {
    _classCallCheck(this, AjaxPlugin);

    this.$options = $.extend(true, {}, APP["default"].axios);
    this.ajax = this.create();
  }

  _createClass(AjaxPlugin, [{
    key: "setOptions",
    value: function setOptions(params) {
      this.$options = $.extend(false, this.$options, params);
    }
  }, {
    key: "_getOptions",
    value: function _getOptions() {
      return this.$options;
    }
  }, {
    key: "create",
    value: function create() {
      return axios.create(this._getOptions());
    }
  }, {
    key: "form",
    value: function form(url, serialize) {
      return this.ajax.post(url, serialize);
    }
  }, {
    key: "post",
    value: function post(url, object) {
      return this.ajax.post(url, object);
    }
  }, {
    key: "get",
    value: function get(url, params) {
      return this.ajax.get(url, params);
    }
  }, {
    key: "addHeader",
    value: function addHeader(header) {
      this.$options.headers = $.extend(true, header, UPCH["default"].axios.headers);
    }
  }]);

  return AjaxPlugin;
}();