"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ModalPlugin =
/*#__PURE__*/
function () {
  function ModalPlugin(modal) {
    var basic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    _classCallCheck(this, ModalPlugin);

    this.basic = basic;
    this.$modal = $("".concat(modal));
    this.$form = undefined;
    this.form = undefined;
    this.validate = false;
    this.options = {};
    this.setDefaultOptions();
  }

  _createClass(ModalPlugin, [{
    key: "_chechedInput",
    value: function _chechedInput() {
      var names = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var value = arguments.length > 1 ? arguments[1] : undefined;
      names.forEach(function (name) {
        var patternType = "type='".concat(name.type, "'");
        var patternName = "name='".concat(name.id, "'");
        var selector = "[".concat(patternType, "][").concat(patternName, "]");

        if (name.type === "checkbox") {
          switch (_typeof(value)) {
            case "boolean":
              var elm = document.querySelector(selector);
              elm.value = +value;
              elm.checked = value;
              break;

            case "object":
              for (var i in value) {
                var patternValue = "value='".concat(value[i], "'");

                var _elm = document.querySelector("".concat(selector, "[").concat(patternValue, "]"));

                _elm.checked = true;
              }

              break;
          }
        } else {
          var _elm2 = document.querySelector("".concat(selector, "[value='").concat(value, "']"));

          _elm2.checked = true;
        }
      });
    }
  }, {
    key: "_formValidate",
    value: function _formValidate() {
      this.validate = this.$form.validate(this.options.formValidate);
    }
  }, {
    key: "_existsForm",
    value: function _existsForm() {
      if (this.options.form && (this.$form !== undefined || this.$form.length > 0)) {
        return true;
      }

      return false;
    }
  }, {
    key: "_clearForm",
    value: function _clearForm() {
      if (this._existsForm()) {
        this.$form.find("input[type='text'],select,textarea").val('');
        this.$form.find("input[type='radio'],input[type='checkbox']").prop('checked', false);

        if (this.options.formValidate) {
          this.validate.resetForm();
        }
      }
    }
  }, {
    key: "_setForm",
    value: function _setForm() {
      this.$form = this.$modal.find("form".concat(this.options.form));

      if (this.$form === undefined || this.$form.length === 0) {
        console.error("ModalPlugin: ", "Form undefined");
        return true;
      }

      this.form = this.$form[0];

      if (this.options.formValidate) {
        this._formValidate();
      }
    }
  }, {
    key: "setDefaultOptions",
    value: function setDefaultOptions() {
      this.options = {
        eventInit: "click",
        title: 'Nuevo Registro',
        buttonInit: false,
        form: false,
        buttonCancel: '#btn-close',
        buttonSubmit: '#btn-save',

        /**
         * formValidate
         *  {
         *    rules:{},
         *    messages:{}
         *  } 
         * @type object
         */
        formValidate: false,
        onBeforeShow: function onBeforeShow() {},
        onAfterHide: function onAfterHide() {}
      };
    }
  }, {
    key: "setOptions",
    value: function setOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.options = $.extend(false, this.options, options);
    }
  }, {
    key: "getOptions",
    value: function getOptions() {
      return this.options;
    }
  }, {
    key: "getForm",
    value: function getForm() {
      return this.$form;
    }
  }, {
    key: "getFormDOM",
    value: function getFormDOM() {
      return this.form;
    }
  }, {
    key: "setLabel",
    value: function setLabel() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      for (var field in data) {
        var elm = this.$modal.find("[data-label='".concat(field, "']"));

        if (elm !== undefined && elm.length > 0) {
          elm.html(data[field]);
        }
      }
    }
  }, {
    key: "setData",
    value: function setData() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.$form === undefined || this.$form.length === 0) {
        console.error("ModalPlugin: ", "Form undefined");
        return false;
      }

      for (var field in data) {
        var elm = this.$form.find("[data-field='".concat(field, "']:input"));

        if (elm !== undefined && elm.length > 0) {
          var names = [];
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            var _loop = function _loop() {
              var input = _step.value;

              if (input.nodeName === "INPUT" && (input.type === "radio" || input.type === "checkbox")) {
                if (names.find(function (name) {
                  return name.id === input.name;
                }) === undefined) {
                  names.push({
                    id: input.name,
                    type: input.type
                  });
                }

                input.checked = false;
              } else {
                input.value = data[field];
              }
            };

            for (var _iterator = elm[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              _loop();
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"] != null) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          if (names.length > 0) {
            this._chechedInput(names, data[field]);
          }
        }
      }
    }
  }, {
    key: "setTitle",
    value: function setTitle(title) {
      var elm = this.$modal.find('#modal-title');

      if (elm === undefined || elm.length === 0) {
        console.error("ModalPlugin: ", "No element found with id #modal-title");
        return false;
      }

      elm.html(title);
    }
  }, {
    key: "open",
    value: function open() {
      this.$modal.modal("show");
    }
  }, {
    key: "close",
    value: function close() {
      this.$modal.modal("hide");
    }
  }, {
    key: "submit",
    value: function submit(callback) {
      var _this = this;

      if (!this.options.buttonSubmit) {
        console.error("ModalPlugin: ", "buttonSubmit undefined");
        return false;
      }

      var btn = this.$modal.find("".concat(this.options.buttonSubmit));

      if (btn === undefined || btn.length === 0) {
        var id = this.options.buttonSubmit;
        console.error("ModalPlugin: ", "No button found with id ".concat(id));
        return false;
      }

      btn.off("click");
      btn.on("click", function () {
        if (callback instanceof Function) {
          var statusForm = true;

          if (_this.options.formValidate) {
            statusForm = _this.$form.valid();
          }

          if (statusForm) {
            callback(_this.getForm());
          }
        }
      });
    }
  }, {
    key: "_initAdvance",
    value: function _initAdvance() {
      var _this2 = this;

      if (this.options.buttonInit) {
        var btnInit = $("".concat(this.options.buttonInit));

        if (btnInit === undefined || btnInit.length === 0) {
          console.error("ModalPlugin: ", "buttonInit undefinded");
          return false;
        }

        btnInit.on(this.options.eventInit, function () {
          _this2.open();
        });
      }

      if (this.options.form) {
        this._setForm();
      }
    }
  }, {
    key: "init",
    value: function init() {
      var _this3 = this;

      if (!this.basic) {
        this._initAdvance();
      }

      this.$modal.on('shown.bs.modal', function (e) {
        if (_this3.options.onBeforeShow instanceof Function) {
          _this3.options.onBeforeShow();
        }
      });
      this.$modal.on('hidden.bs.modal', function (e) {
        if (_this3.options.onAfterHide instanceof Function) {
          _this3._clearForm();

          _this3.setTitle(_this3.options.title);

          _this3.options.onAfterHide();
        }
      });
    }
  }]);

  return ModalPlugin;
}();